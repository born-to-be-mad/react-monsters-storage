{"version":3,"sources":["components/header/header.component.jsx","components/search-box/search-box.component.jsx","components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/scroll/scroll.component.jsx","components/error-boundary/error-boundary.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","nextProps","nextState","console","log","Component","SearchBox","placeholder","handleChange","className","type","onChange","Card","name","email","id","alt","src","CardList","items","map","item","index","key","Scroll","props","style","overflow","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","App","onHandleChange","e","searchFilter","target","value","string","monsters","showChild","isPending","fetch","then","response","json","users","filteredMonsters","filter","monster","toLowerCase","includes","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qVAqBeA,E,8LAbSC,EAAWC,GAC/B,OAAO,I,+BAIP,OADAC,QAAQC,IAAI,UAEV,6BACE,sD,GARaC,aCONC,G,MAXG,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,aAChC,OACE,2BACEC,UAAU,SACVC,KAAK,SACLH,YAAaA,EACbI,SAAUH,MCNHI,G,MAAO,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,GAClC,OACE,yBAAKN,UAAU,kBACb,yBACEO,IAAI,UACJC,IAAG,+BAA0BF,EAA1B,4BAEL,4BAAKF,GACL,2BAAIC,MCMKI,G,MAbE,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAElB,OADAhB,QAAQC,IAAI,YAEV,yBAAKK,UAAU,aACZU,EAAMC,KAAI,SAACC,EAAMC,GAChB,OACE,kBAAC,EAAD,CAAMC,IAAKD,EAAOP,GAAIM,EAAKN,GAAIF,KAAMQ,EAAKR,KAAMC,MAAOO,EAAKP,cCGvDU,EAXA,SAAAC,GAEb,OADAtB,QAAQC,IAAI,UAEV,yBACEsB,MAAO,CAAEC,SAAU,SAAUC,OAAQ,kBAAmBC,OAAQ,UAE/DJ,EAAMK,WCaEC,E,YAlBb,WAAYN,GAAQ,IAAD,8BACjB,4CAAMA,KACDO,MAAQ,CAAEC,UAAU,GAFR,E,+EAKDC,EAAOC,GACvBC,KAAKC,SAAS,CAAEJ,UAAU,M,+BAK1B,OADA9B,QAAQC,IAAI,iBACRgC,KAAKJ,MAAMC,SACN,qDAEFG,KAAKX,MAAMK,a,GAfMzB,aC2DbiC,G,kBAlDb,aAAe,IAAD,8BACZ,+CAgBFC,eAAiB,SAAAC,GACf,EAAKH,SAAS,CAAEI,aAAcD,EAAEE,OAAOC,SAhBvC,EAAKX,MAAQ,CACXY,OAAQ,QACRC,SAAU,GACVJ,aAAc,GACdK,WAAW,EACXC,WAAW,GAPD,E,iFAWO,IAAD,OAClBC,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKf,SAAS,CAAEQ,SAAUO,EAAOL,WAAW,S,+BAOrD,IAAD,EACuCX,KAAKJ,MAA3Ca,EADD,EACCA,SAAUJ,EADX,EACWA,aAAcM,EADzB,EACyBA,UAC1BM,EAAmBR,EAASS,QAAO,SAAAC,GACvC,OAAOA,EAAQ1C,KAAK2C,cAAcC,SAAShB,EAAae,kBAI1D,OADArD,QAAQC,IAAIiD,GAEV,yBAAK5C,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CACEF,YAAY,wBACZC,aAAc4B,KAAKG,iBAGrB,kBAAC,EAAD,KACGQ,EACC,uCAEA,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAU5B,MAAOkC,W,GA1CbhD,cCEEqD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpB,MAAK,SAAAqB,GACjCA,EAAaC,kB","file":"static/js/main.fb4ddcf9.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\n// In most cases, instead of writing shouldComponentUpdate()\n// by hand, you can inherit from React.PureComponent. It is\n// equivalent to implementing shouldComponentUpdate() with a\n// shallow comparison of current and previous props and state.\n\nclass Header extends Component {\n  shouldComponentUpdate(nextProps, nextState) {\n    return false;\n  }\n  render() {\n    console.log(\"header\");\n    return (\n      <div>\n        <h1>Monster's storage</h1>\n      </div>\n    );\n  }\n}\n\nexport default Header;\n","import React from \"react\";\nimport \"./search-box.styles.css\";\n\nconst SearchBox = ({ placeholder, handleChange }) => {\n  return (\n    <input\n      className=\"search\"\n      type=\"search\"\n      placeholder={placeholder}\n      onChange={handleChange}\n    />\n  );\n};\n\nexport default SearchBox;\n","import React from \"react\";\nimport \"./card.styles.css\";\n\nexport const Card = ({ name, email, id }) => {\n  return (\n    <div className=\"card-container\">\n      <img\n        alt=\"Monster\"\n        src={`https://robohash.org/${id}?set=set2&size=180x180`}\n      />\n      <h2>{name}</h2>\n      <p>{email}</p>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { Card } from \"../card/card.component\";\nimport \"./card-list.styles.css\";\n\nconst CardList = ({ items }) => {\n  console.log(\"CardList\");\n  return (\n    <div className=\"card-list\">\n      {items.map((item, index) => {\n        return (\n          <Card key={index} id={item.id} name={item.name} email={item.email} />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default CardList;\n","import React from \"react\";\n\nconst Scroll = props => {\n  console.log(\"Scroll\");\n  return (\n    <div\n      style={{ overflow: \"scroll\", border: \"5px solid black\", height: \"800px\" }}\n    >\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;\n","import React, { Component } from \"react\";\n\nclass ErrorBoundary extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  componentDidCatch(error, info) {\n    this.setState({ hasError: true });\n  }\n\n  render() {\n    console.log(\"ErrorBoundary\");\n    if (this.state.hasError) {\n      return <h1>Something went wrong.</h1>;\n    }\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;\n","import React, { Component } from \"react\";\n\nimport Header from \"./components/header/header.component\";\nimport SearchBox from \"./components/search-box/search-box.component\";\nimport CardList from \"./components/card-list/card-list.component\";\nimport Scroll from \"./components/scroll/scroll.component\";\nimport ErrorBoundry from \"./components/error-boundary/error-boundary.component\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      string: \"hello\",\n      monsters: [],\n      searchFilter: \"\",\n      showChild: true,\n      isPending: true\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then(response => response.json())\n      .then(users => this.setState({ monsters: users, isPending: false }));\n  }\n\n  onHandleChange = e => {\n    this.setState({ searchFilter: e.target.value });\n  };\n\n  render() {\n    const { monsters, searchFilter, isPending } = this.state;\n    const filteredMonsters = monsters.filter(monster => {\n      return monster.name.toLowerCase().includes(searchFilter.toLowerCase());\n    });\n\n    console.log(filteredMonsters);\n    return (\n      <div className=\"App\">\n        <Header />\n        <SearchBox\n          placeholder=\"Enter search criteria\"\n          handleChange={this.onHandleChange}\n        />\n\n        <Scroll>\n          {isPending ? (\n            <h1>Loading</h1>\n          ) : (\n            <ErrorBoundry>\n              <CardList items={filteredMonsters} />\n            </ErrorBoundry>\n          )}\n        </Scroll>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}