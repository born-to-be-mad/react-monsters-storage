{"version":3,"sources":["redux/actions.js","api/api.js","redux/constants.js","components/header/header.component.jsx","components/search-box/search-box.component.jsx","components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/scroll/scroll.component.jsx","components/error-boundary/error-boundary.component.jsx","pages/main-page.component.jsx","containers/App.js","serviceWorker.js","redux/reducers.js","index.js"],"names":["requestMonsters","dispatch","link","type","fetch","then","response","json","data","payload","catch","error","Header","nextProps","nextState","Component","SearchBox","placeholder","handleChange","className","onChange","Card","name","email","id","alt","src","CardList","items","map","item","index","key","Scroll","props","style","overflow","border","height","children","ErrorBoundary","state","hasError","info","this","setState","console","log","MainPage","filterMonsters","monsters","filter","monster","toLowerCase","includes","searchFilter","onRequestMonsters","isPending","onSearchChange","App","connect","searchMonsters","event","target","value","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","initialSearchState","initialRequestState","logger","createLogger","rootReducers","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.d5c8539d.chunk.js","sourcesContent":["import { apiCall } from \"../api/api\";\nimport {\n  CHANGE_SEARCH_FILTER,\n  REQUEST_MONSTERS_PENDING,\n  REQUEST_MONSTERS_SUCCESS,\n  REQUEST_MONSTERS_FAILED\n} from \"./constants\";\n\nexport const setSearchFilter = text => {\n  return {\n    type: CHANGE_SEARCH_FILTER,\n    payload: text\n  };\n};\n\nexport const requestMonsters = () => dispatch => {\n  dispatch({ type: REQUEST_MONSTERS_PENDING });\n  apiCall(\"https://jsonplaceholder.typicode.com/users\")\n    .then(data => dispatch({ type: REQUEST_MONSTERS_SUCCESS, payload: data }))\n    .catch(error =>\n      dispatch({ type: REQUEST_MONSTERS_FAILED, payload: error })\n    );\n};\n","export const apiCall = (link) =>\n  fetch(link).then(response => response.json())","export const CHANGE_SEARCH_FILTER = \"CHANGE_SEARCH_FILTER\";\n\nexport const REQUEST_MONSTERS_PENDING = \"REQUEST_MONSTERS_PENDING\";\nexport const REQUEST_MONSTERS_SUCCESS = \"REQUEST_MONSTERS_SUCCESS\";\nexport const REQUEST_MONSTERS_FAILED = \"REQUEST_MONSTERS_FAILED\";\n","import React, { Component } from \"react\";\n\n// In most cases, instead of writing shouldComponentUpdate()\n// by hand, you can inherit from React.PureComponent. It is\n// equivalent to implementing shouldComponentUpdate() with a\n// shallow comparison of current and previous props and state.\n\nclass Header extends Component {\n  shouldComponentUpdate(nextProps, nextState) {\n    return false;\n  }\n  render() {\n    return (\n      <div>\n        <h1>Monster's storage</h1>\n      </div>\n    );\n  }\n}\n\nexport default Header;\n","import React from \"react\";\nimport \"./search-box.styles.css\";\n\nconst SearchBox = ({ placeholder, handleChange }) => {\n  return (\n    <input\n      className=\"search\"\n      type=\"search\"\n      placeholder={placeholder}\n      onChange={handleChange}\n    />\n  );\n};\n\nexport default SearchBox;\n","import React from \"react\";\nimport \"./card.styles.css\";\n\nconst Card = ({ name, email, id }) => {\n  return (\n    <div className=\"card-container1\">\n      <img\n        alt=\"Monster\"\n        src={`https://robohash.org/${id}?set=set2&size=180x180`}\n      />\n      <h2>{name}</h2>\n      <p>{email}</p>\n    </div>\n  );\n};\n\nexport default Card;\n","import React from \"react\";\nimport Card from \"../card/card.component\";\nimport \"./card-list.styles.css\";\n\nconst CardList = ({ items }) => {\n  return (\n    <div className=\"card-list\">\n      {items.map((item, index) => {\n        return (\n          <Card key={index} id={item.id} name={item.name} email={item.email} />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default CardList;\n","import React from \"react\";\n\nconst Scroll = props => {\n  return (\n    <div\n      style={{ overflow: \"scroll\", border: \"5px solid black\", height: \"800px\" }}\n    >\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;\n","import React, { Component } from \"react\";\n\nclass ErrorBoundary extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  componentDidCatch(error, info) {\n    this.setState({ hasError: true });\n  }\n\n  render() {\n    console.log(\"ErrorBoundary\");\n    if (this.state.hasError) {\n      return <h1>Something went wrong.</h1>;\n    }\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;\n","import React, { Component } from \"react\";\n\nimport Header from \"../components/header/header.component\";\nimport SearchBox from \"../components/search-box/search-box.component\";\nimport CardList from \"../components/card-list/card-list.component\";\nimport Scroll from \"../components/scroll/scroll.component\";\nimport ErrorBoundry from \"../components/error-boundary/error-boundary.component\";\n\nimport \"./main-page.css\";\n\nclass MainPage extends Component {\n  componentDidMount() {\n    this.props.onRequestMonsters();\n  }\n\n  filterMonsters = () => {\n    return this.props.monsters.filter(monster => {\n      return monster.name\n        .toLowerCase()\n        .includes(this.props.searchFilter.toLowerCase());\n    });\n  };\n\n  render() {\n    const { isPending, onSearchChange } = this.props;\n\n    return (\n      <div className=\"main-page\">\n        <Header />\n        <SearchBox\n          placeholder=\"Enter search criteria\"\n          handleChange={onSearchChange}\n        />\n\n        <Scroll>\n          {isPending ? (\n            <h1>Loading</h1>\n          ) : (\n            <ErrorBoundry>\n              <CardList items={this.filterMonsters()} />\n            </ErrorBoundry>\n          )}\n        </Scroll>\n      </div>\n    );\n  }\n}\n\nexport default MainPage;\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { setSearchFilter, requestMonsters } from \"../redux/actions\";\n\nimport MainPage from \"../pages/main-page.component\";\n\nimport \"./App.css\";\n\nconst mapStateToProps = state => {\n  return {\n    searchFilter: state.searchMonsters.searchFilter,\n    monsters: state.requestMonsters.monsters,\n    isPending: state.requestMonsters.isPending\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onSearchChange: event => dispatch(setSearchFilter(event.target.value)),\n    onRequestMonsters: () => dispatch(requestMonsters())\n  };\n};\n\nclass App extends Component {\n  render() {\n    return <MainPage {...this.props} />;\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log(\"New content is available; please refresh.\");\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n  CHANGE_SEARCH_FILTER,\n  REQUEST_MONSTERS_PENDING,\n  REQUEST_MONSTERS_SUCCESS,\n  REQUEST_MONSTERS_FAILED\n} from \"./constants\";\n\nconst initialSearchState = {\n  searchFilter: \"\"\n};\n\nexport const searchMonsters = (state = initialSearchState, action = {}) => {\n  switch (action.type) {\n    case CHANGE_SEARCH_FILTER:\n      return Object.assign({}, state, { searchFilter: action.payload });\n    default:\n      return state;\n  }\n};\n\nconst initialRequestState = {\n  monsters: [],\n  isPending: false\n};\n\nexport const requestMonsters = (state = initialRequestState, action = {}) => {\n  switch (action.type) {\n    case REQUEST_MONSTERS_PENDING:\n      return Object.assign({}, state, { isPending: true });\n    case REQUEST_MONSTERS_SUCCESS:\n      return Object.assign({}, state, {\n        monsters: action.payload,\n        isPending: false\n      });\n    case REQUEST_MONSTERS_FAILED:\n      return Object.assign({}, state, { error: action.payload });\n    default:\n      return state;\n  }\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport { createStore, combineReducers, applyMiddleware } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport thunkMiddleware from \"redux-thunk\";\nimport { createLogger } from \"redux-logger\";\n\nimport App from \"./containers/App\";\nimport registerServiceWorker from \"./serviceWorker\";\nimport { requestMonsters, searchMonsters } from \"./redux/reducers\";\n\nimport \"./index.css\";\n\nconst logger = createLogger();\n\nconst rootReducers = combineReducers({ requestMonsters, searchMonsters });\n\nconst store = createStore(\n  rootReducers,\n  applyMiddleware(thunkMiddleware, logger)\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\nregisterServiceWorker();\n"],"sourceRoot":""}